## Pair Programming Reflections - Week 1
**using the driver-navigator style**

During the first week of pair programming, I'll admit I felt quite nervous about the whole process. However, I quickly realised that I needed to overcome how I was feeling to make our sessions more enjoyable and productive. Here's how I managed to do that:

1. Building a Good Rapport: To ease my nerves, I made an effort to build a good rapport with my pair partner. We had some friendly chats, shared experiences, and found common ground. Creating a comfortable and collaborative atmosphere helped us both feel at ease and ready to learn together.

2. Embracing the Learning Journey: I reminded myself that pair programming isn't just about getting the end result right away. It's a journey of learning and growth for both of us. I embraced the fact that we're all in this together, and it's natural to encounter challenges along the way. Letting go of the pressure to be perfect allowed me to focus on absorbing new skills and knowledge.

Looking ahead, I'm excited to continue building upon this foundation, keeping communication open, and celebrating our progress as we dive into future pair programming sessions.

## Pair Programming Reflections - Week 2

During our second week, I felt more at ease tackling the coding challenge!

I've also discovered the qualities I value in a pair partner: good communication, equal contribution, comfort, a sense of humour, and PATIENCE and creating a non-judgmental environment.  These qualities bring out the best in both of us and make our sessions enjoyable.

I've learned that it's best to take our time and ensure we both understand the material before moving forward. The focus should be on learning, not rushing through tasks or meeting specific expectations within a set time frame- emphasizing on learning over completion! 

## Personal Do's and Don'ts:

### Do's:

1. Take regular 5-10 minute breaks, approximately every 30-40 minutes.
2. Push code to GitHub regularly, ideally after completing each task.
3. Share screens during the session for better collaboration.
4. Regularly switch roles between the navigator and driver, preferably after each task.
5. Use Git for pushing and pulling code, rather than controlling the other person's screen.
6. Ensure all necessary links and resources are prepared before the session begins.

### Don'ts:

1. Spend more than 20 minutes on debugging. If a solution cannot be found, refer to the walkthrough and ensure a clear understanding before moving forward. If solution still not found, ask for help by reaching out to the coaches. 
2. Avoid controlling the other person's screen whenever possible, as it hinders practicing Git commands like pull and push. It also leads to additional effort in forking and cloning repositories, potentially cluttering the local computer or GitHub desktop page.